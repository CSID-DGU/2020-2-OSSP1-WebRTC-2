{"ast":null,"code":"import _toConsumableArray from\"/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/node_modules/@babel/runtime/helpers/esm/createSuper\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{Component}from'react';import io from'socket.io-client';//import './App.css';\n//import Video from './Components/Video/Video'\n//import Videos from './Components/Video/Videos'\nimport Video from'./Video';import Videos from'./Videos';import Chat from'./Chat';import Draggable from'./Draggable';var Cam=/*#__PURE__*/function(_Component){_inherits(Cam,_Component);var _super=_createSuper(Cam);function Cam(props){var _this;_classCallCheck(this,Cam);_this=_super.call(this,props);_this.getLocalStream=function(){// called when getUserMedia() successfully returns - see below\n// getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\nvar success=function success(stream){window.localStream=stream;// this.localVideoref.current.srcObject = stream\n// this.pc.addStream(stream);\n_this.setState({localStream:stream});_this.whoisOnline();};// called when getUserMedia() fails - see below\nvar failure=function failure(e){console.log('getUserMedia Error: ',e);};// https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n// see the above link for more constraint options\nvar constraints={audio:true,video:true,// video: {\n//   width: 1280,\n//   height: 720\n// },\n// video: {\n//   width: { min: 1280 },\n// }\noptions:{mirror:true}};// https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\nnavigator.mediaDevices.getUserMedia(constraints).then(success).catch(failure);};_this.whoisOnline=function(){// let all peers know I am joining\n_this.sendToPeer('onlinePeers',null,{local:_this.socket.id});};_this.sendToPeer=function(messageType,payload,socketID){_this.socket.emit(messageType,{socketID:socketID,payload:payload});};_this.createPeerConnection=function(socketID,callback){try{var pc=new RTCPeerConnection(_this.state.pc_config);// add pc to peerConnections object\nvar peerConnections=_objectSpread(_objectSpread({},_this.state.peerConnections),{},_defineProperty({},socketID,pc));_this.setState({peerConnections:peerConnections});pc.onicecandidate=function(e){if(e.candidate){_this.sendToPeer('candidate',e.candidate,{local:_this.socket.id,remote:socketID});}};pc.oniceconnectionstatechange=function(e){// if (pc.iceConnectionState === 'disconnected') {\n//   const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== socketID)\n//   this.setState({\n//     remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n//   })\n// }\n};pc.ontrack=function(e){var _remoteStream=null;var remoteStreams=_this.state.remoteStreams;var remoteVideo={};// 1. check if stream already exists in remoteStreams\nvar rVideos=_this.state.remoteStreams.filter(function(stream){return stream.id===socketID;});// 2. if it does exist then add track\nif(rVideos.length){_remoteStream=rVideos[0].stream;_remoteStream.addTrack(e.track,_remoteStream);remoteVideo=_objectSpread(_objectSpread({},rVideos[0]),{},{stream:_remoteStream});remoteStreams=_this.state.remoteStreams.map(function(_remoteVideo){return _remoteVideo.id===remoteVideo.id&&remoteVideo||_remoteVideo;});}else{// 3. if not, then create new stream and add track\n_remoteStream=new MediaStream();_remoteStream.addTrack(e.track,_remoteStream);remoteVideo={id:socketID,name:socketID,stream:_remoteStream};remoteStreams=[].concat(_toConsumableArray(_this.state.remoteStreams),[remoteVideo]);}// const remoteVideo = {\n//   id: socketID,\n//   name: socketID,\n//   stream: e.streams[0]\n// }\n_this.setState(function(prevState){// If we already have a stream in display let it stay the same, otherwise use the latest stream\n// const remoteStream = prevState.remoteStreams.length > 0 ? {} : { remoteStream: e.streams[0] }\nvar remoteStream=prevState.remoteStreams.length>0?{}:{remoteStream:_remoteStream};// get currently selected video\nvar selectedVideo=prevState.remoteStreams.filter(function(stream){return stream.id===prevState.selectedVideo.id;});// if the video is still in the list, then do nothing, otherwise set to new video stream\nselectedVideo=selectedVideo.length?{}:{selectedVideo:remoteVideo};return _objectSpread(_objectSpread(_objectSpread({},selectedVideo),remoteStream),{},{remoteStreams:remoteStreams//: [...prevState.remoteStreams, remoteVideo]\n});});};pc.close=function(){// alert('GONE')\nconsole.log(\"pc closed\");};if(_this.state.localStream)//pc.addStream(this.state.localStream)\n_this.state.localStream.getTracks().forEach(function(track){pc.addTrack(track,_this.state.localStream);});// return pc\ncallback(pc);}catch(e){console.log('Something went wrong! pc not created!!',e);// return;\ncallback(null);}};_this.componentDidMount=function(){_this.socket=io.connect(_this.serviceIP,{path:'/io/webrtc',query:{room:window.location.pathname}});_this.socket.on('connection-success',function(data){_this.getLocalStream();//console.log(data.success)\nvar status=data.peerCount>1?\"Total Connected Peers to room \".concat(window.location.pathname,\": \").concat(data.peerCount):'Waiting for other peers to connect';_this.setState({status:status,messages:data.messages});});_this.socket.on('joined-peers',function(data){_this.setState({status:data.peerCount>1?\"Total Connected Peers to room \".concat(window.location.pathname,\": \").concat(data.peerCount):'Waiting for other peers to connect'});});// ************************************* //\n// ************************************* //\n_this.socket.on('peer-disconnected',function(data){// close peer-connection with this peer\n_this.state.peerConnections[data.socketID].close();//console.log('peer-disconnected', data)\n// get and stop remote audio and video tracks of the disconnected peer\nvar rVideo=_this.state.remoteStreams.filter(function(stream){return stream.id===data.socketID;});rVideo&&_this.stopTracks(rVideo[0].stream);// filter out the disconnected peer stream\nvar remoteStreams=_this.state.remoteStreams.filter(function(stream){return stream.id!==data.socketID;});_this.setState(function(prevState){// check if disconnected peer is the selected video and if there still connected peers, then select the first\nvar selectedVideo=prevState.selectedVideo.id===data.socketID&&remoteStreams.length?{selectedVideo:remoteStreams[0]}:null;return _objectSpread(_objectSpread({// remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\nremoteStreams:remoteStreams},selectedVideo),{},{status:data.peerCount>1?\"Total Connected Peers to room \".concat(window.location.pathname,\": \").concat(data.peerCount):'Waiting for other peers to connect'});});});// this.socket.on('offerOrAnswer', (sdp) => {\n//   this.textref.value = JSON.stringify(sdp)\n//   // set sdp as remote description\n//   this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n// })\n_this.socket.on('online-peer',function(socketID){console.log('connected peers ...',socketID);// create and send offer to the peer (data.socketID)\n// 1. Create new pc\n_this.createPeerConnection(socketID,function(pc){// 2. Create Offer\nif(pc){// Send Channel\nvar handleSendChannelStatusChange=function handleSendChannelStatusChange(event){console.log('send channel status: '+_this.state.sendChannels[0].readyState);};var sendChannel=pc.createDataChannel('sendChannel');sendChannel.onopen=handleSendChannelStatusChange;sendChannel.onclose=handleSendChannelStatusChange;_this.setState(function(prevState){return{sendChannels:[].concat(_toConsumableArray(prevState.sendChannels),[sendChannel])};});// Receive Channels\nvar handleReceiveMessage=function handleReceiveMessage(event){var message=JSON.parse(event.data);// console.log(message)\n_this.setState(function(prevState){return{messages:[].concat(_toConsumableArray(prevState.messages),[message])};});};var handleReceiveChannelStatusChange=function handleReceiveChannelStatusChange(event){if(_this.receiveChannel){console.log(\"receive channel's status has changed to \"+_this.receiveChannel.readyState);}};var receiveChannelCallback=function receiveChannelCallback(event){var receiveChannel=event.channel;receiveChannel.onmessage=handleReceiveMessage;receiveChannel.onopen=handleReceiveChannelStatusChange;receiveChannel.onclose=handleReceiveChannelStatusChange;};pc.ondatachannel=receiveChannelCallback;pc.createOffer(_this.state.sdpConstraints).then(function(sdp){pc.setLocalDescription(sdp);_this.sendToPeer('offer',sdp,{local:_this.socket.id,remote:socketID});});}});});_this.socket.on('offer',function(data){_this.createPeerConnection(data.socketID,function(pc){pc.addStream(_this.state.localStream);// Send Channel\nvar handleSendChannelStatusChange=function handleSendChannelStatusChange(event){console.log('send channel status: '+_this.state.sendChannels[0].readyState);};var sendChannel=pc.createDataChannel('sendChannel');sendChannel.onopen=handleSendChannelStatusChange;sendChannel.onclose=handleSendChannelStatusChange;_this.setState(function(prevState){return{sendChannels:[].concat(_toConsumableArray(prevState.sendChannels),[sendChannel])};});// Receive Channels\nvar handleReceiveMessage=function handleReceiveMessage(event){var message=JSON.parse(event.data);// console.log(message)\n_this.setState(function(prevState){return{messages:[].concat(_toConsumableArray(prevState.messages),[message])};});};var handleReceiveChannelStatusChange=function handleReceiveChannelStatusChange(event){if(_this.receiveChannel){console.log(\"receive channel's status has changed to \"+_this.receiveChannel.readyState);}};var receiveChannelCallback=function receiveChannelCallback(event){var receiveChannel=event.channel;receiveChannel.onmessage=handleReceiveMessage;receiveChannel.onopen=handleReceiveChannelStatusChange;receiveChannel.onclose=handleReceiveChannelStatusChange;};pc.ondatachannel=receiveChannelCallback;pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(function(){// 2. Create Answer\npc.createAnswer(_this.state.sdpConstraints).then(function(sdp){pc.setLocalDescription(sdp);_this.sendToPeer('answer',sdp,{local:_this.socket.id,remote:data.socketID});});});});});_this.socket.on('answer',function(data){// get remote's peerConnection\nvar pc=_this.state.peerConnections[data.socketID];console.log(data.sdp);pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(function(){});});_this.socket.on('candidate',function(data){// get remote's peerConnection\nvar pc=_this.state.peerConnections[data.socketID];if(pc)pc.addIceCandidate(new RTCIceCandidate(data.candidate));});// const pc_config = null\n// const pc_config = {\n//   \"iceServers\": [\n//     // {\n//     //   urls: 'stun:[STUN_IP]:[PORT]',\n//     //   'credentials': '[YOR CREDENTIALS]',\n//     //   'username': '[USERNAME]'\n//     // },\n//     {\n//       urls : 'stun:stun.l.google.com:19302'\n//     }\n//   ]\n// }\n// https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n// create an instance of RTCPeerConnection\n// this.pc = new RTCPeerConnection(this.state.pc_config)\n// triggered when a new candidate is returned\n// this.pc.onicecandidate = (e) => {\n//   // send the candidates to the remote peer\n//   // see addCandidate below to be triggered on the remote peer\n//   if (e.candidate) {\n//     // console.log(JSON.stringify(e.candidate))\n//     this.sendToPeer('candidate', e.candidate)\n//   }\n// }\n// triggered when there is a change in connection state\n// this.pc.oniceconnectionstatechange = (e) => {\n//   console.log(e)\n// }\n// triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n// this.pc.onaddstream = (e) => {\n//   this.remoteVideoref.current.srcObject = e.stream\n// }\n// this.pc.ontrack = (e) => {\n//   debugger\n//   // this.remoteVideoref.current.srcObject = e.streams[0]\n//   this.setState({\n//     remoteStream: e.streams[0]\n//   })\n// }\n};_this.disconnectSocket=function(socketToDisconnect){_this.sendToPeer('socket-to-disconnect',null,{local:_this.socket.id,remote:socketToDisconnect});};_this.switchVideo=function(_video){console.log(_video);_this.setState({selectedVideo:_video});};_this.stopTracks=function(stream){stream.getTracks().forEach(function(track){return track.stop();});};_this.state={localStream:null,// used to hold local stream object to avoid recreating the stream everytime a new offer comes\nremoteStream:null,// used to hold remote stream object that is displayed in the main screen\nremoteStreams:[],// holds all Video Streams (all remote streams)\npeerConnections:{},// holds all Peer Connections\nselectedVideo:null,status:'Please wait',pc_config:{\"iceServers\":[{urls:'stun:stun.l.google.com:19302'}]},sdpConstraints:{'mandatory':{'OfferToReceiveAudio':true,'OfferToReceiveVideo':true}},messages:[],sendChannels:[],disconnected:false};// DONT FORGET TO CHANGE TO YOUR URL\n_this.serviceIP='https://ecc9c63b399f.ngrok.io/webrtcPeer';// https://reactjs.org/docs/refs-and-the-dom.html\n// this.localVideoref = React.createRef()\n// this.remoteVideoref = React.createRef()\n_this.socket=null;// this.candidates = []\nreturn _this;}_createClass(Cam,[{key:\"render\",value:function render(){var _this2=this;var _this$state=this.state,status=_this$state.status,messages=_this$state.messages,disconnected=_this$state.disconnected,localStream=_this$state.localStream,peerConnections=_this$state.peerConnections,remoteStreams=_this$state.remoteStreams;if(disconnected){// disconnect socket\nthis.socket.close();// stop local audio & video tracks\nthis.stopTracks(localStream);// stop all remote audio & video tracks\nremoteStreams.forEach(function(rVideo){return _this2.stopTracks(rVideo.stream);});// stop all remote peerconnections\npeerConnections&&Object.values(peerConnections).forEach(function(pc){return pc.close();});return/*#__PURE__*/_jsx(\"div\",{children:\"You have successfully Disconnected\"});}//console.log(this.state.localStream)\nvar statusText=/*#__PURE__*/_jsx(\"div\",{style:{color:'yellow',padding:5},children:status});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Draggable,{style:{zIndex:101,position:'absolute',right:0,cursor:'move'},children:/*#__PURE__*/_jsx(Video,{videoType:\"localVideo\",videoStyles:{// zIndex:2,\n// position: 'absolute',\n// right:0,\nwidth:200// height: 200,\n// margin: 5,\n// backgroundColor: 'black'\n},frameStyle:{width:200,margin:5,borderRadius:5,backgroundColor:'black'},showMuteControls:true// ref={this.localVideoref}\n,videoStream:localStream,autoPlay:true,muted:true})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{style:{zIndex:3,position:'absolute'// margin: 10,\n// backgroundColor: '#cdc4ff4f',\n// padding: 10,\n// borderRadius: 5,\n},children:[/*#__PURE__*/_jsx(\"i\",{onClick:function onClick(e){_this2.setState({disconnected:true});},style:{cursor:'pointer',paddingLeft:15,color:'red'},class:\"material-icons\",children:\"highlight_off\"}),/*#__PURE__*/_jsx(\"div\",{style:{margin:10,backgroundColor:'#cdc4ff4f',padding:10,borderRadius:5},children:statusText})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Videos,{switchVideo:this.switchVideo,remoteStreams:remoteStreams// videoStream={this.state.selectedVideo && this.state.selectedVideo.stream}\n})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Chat,{user:{uid:this.socket&&this.socket.id||''},messages:messages,sendMessage:function sendMessage(message){_this2.setState(function(prevState){return{messages:[].concat(_toConsumableArray(prevState.messages),[message])};});_this2.state.sendChannels.map(function(sendChannel){sendChannel.readyState==='open'&&sendChannel.send(JSON.stringify(message));});_this2.sendToPeer('new-message',JSON.stringify(message),{local:_this2.socket.id});}})]});}}]);return Cam;}(Component);export default Cam;","map":{"version":3,"sources":["/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/src/Components/Cam/Cam.js"],"names":["React","Component","io","Video","Videos","Chat","Draggable","Cam","props","getLocalStream","success","stream","window","localStream","setState","whoisOnline","failure","e","console","log","constraints","audio","video","options","mirror","navigator","mediaDevices","getUserMedia","then","catch","sendToPeer","local","socket","id","messageType","payload","socketID","emit","createPeerConnection","callback","pc","RTCPeerConnection","state","pc_config","peerConnections","onicecandidate","candidate","remote","oniceconnectionstatechange","ontrack","_remoteStream","remoteStreams","remoteVideo","rVideos","filter","length","addTrack","track","map","_remoteVideo","MediaStream","name","prevState","remoteStream","selectedVideo","close","getTracks","forEach","componentDidMount","connect","serviceIP","path","query","room","location","pathname","on","data","status","peerCount","messages","rVideo","stopTracks","handleSendChannelStatusChange","event","sendChannels","readyState","sendChannel","createDataChannel","onopen","onclose","handleReceiveMessage","message","JSON","parse","handleReceiveChannelStatusChange","receiveChannel","receiveChannelCallback","channel","onmessage","ondatachannel","createOffer","sdpConstraints","sdp","setLocalDescription","addStream","setRemoteDescription","RTCSessionDescription","createAnswer","addIceCandidate","RTCIceCandidate","disconnectSocket","socketToDisconnect","switchVideo","_video","stop","urls","disconnected","Object","values","statusText","color","padding","zIndex","position","right","cursor","width","margin","borderRadius","backgroundColor","paddingLeft","uid","send","stringify"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport io from 'socket.io-client'\n//import './App.css';\n\n//import Video from './Components/Video/Video'\n//import Videos from './Components/Video/Videos'\nimport Video from './Video'\nimport Videos from './Videos'\nimport Chat from './Chat'\nimport Draggable from './Draggable'\n\n\nclass Cam extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      localStream: null,    // used to hold local stream object to avoid recreating the stream everytime a new offer comes\n      remoteStream: null,    // used to hold remote stream object that is displayed in the main screen\n\n      remoteStreams: [],    // holds all Video Streams (all remote streams)\n      peerConnections: {},  // holds all Peer Connections\n      selectedVideo: null,\n\n      status: 'Please wait',\n\n      pc_config: {\n        \"iceServers\": [\n          {\n            urls : 'stun:stun.l.google.com:19302'\n          }\n        ]\n      },\n\n      sdpConstraints: {\n        'mandatory': {\n            'OfferToReceiveAudio': true,\n            'OfferToReceiveVideo': true\n        }\n      },\n\n      messages: [],\n      sendChannels: [],\n      disconnected: false,\n    }\n\n    // DONT FORGET TO CHANGE TO YOUR URL\n    this.serviceIP = 'https://ecc9c63b399f.ngrok.io/webrtcPeer'\n\n    // https://reactjs.org/docs/refs-and-the-dom.html\n    // this.localVideoref = React.createRef()\n    // this.remoteVideoref = React.createRef()\n\n    this.socket = null\n    // this.candidates = []\n  }\n\n  getLocalStream = () => {\n    // called when getUserMedia() successfully returns - see below\n    // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n    const success = (stream) => {\n      window.localStream = stream\n      // this.localVideoref.current.srcObject = stream\n      // this.pc.addStream(stream);\n      this.setState({\n        localStream: stream\n      })\n\n      this.whoisOnline()\n    }\n\n    // called when getUserMedia() fails - see below\n    const failure = (e) => {\n      console.log('getUserMedia Error: ', e)\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    // see the above link for more constraint options\n    const constraints = {\n      audio: true,\n      video: true,\n      // video: {\n      //   width: 1280,\n      //   height: 720\n      // },\n      // video: {\n      //   width: { min: 1280 },\n      // }\n      options: {\n        mirror: true,\n      }\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then(success)\n      .catch(failure)\n  }\n\n  whoisOnline = () => {\n    // let all peers know I am joining\n    this.sendToPeer('onlinePeers', null, {local: this.socket.id})\n  }\n\n  sendToPeer = (messageType, payload, socketID) => {\n    this.socket.emit(messageType, {\n      socketID,\n      payload\n    })\n  }\n\n  createPeerConnection = (socketID, callback) => {\n\n    try {\n      let pc = new RTCPeerConnection(this.state.pc_config)\n\n      // add pc to peerConnections object\n      const peerConnections = { ...this.state.peerConnections, [socketID]: pc }\n      this.setState({\n        peerConnections\n      })\n\n      pc.onicecandidate = (e) => {\n        if (e.candidate) {\n          this.sendToPeer('candidate', e.candidate, {\n            local: this.socket.id,\n            remote: socketID\n          })\n        }\n      }\n\n      pc.oniceconnectionstatechange = (e) => {\n        // if (pc.iceConnectionState === 'disconnected') {\n        //   const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== socketID)\n\n        //   this.setState({\n        //     remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n        //   })\n        // }\n\n      }\n\n      pc.ontrack = (e) => {\n\n        let _remoteStream = null\n        let remoteStreams = this.state.remoteStreams\n        let remoteVideo = {}\n\n        // 1. check if stream already exists in remoteStreams\n        const rVideos = this.state.remoteStreams.filter(stream => stream.id === socketID)\n\n        // 2. if it does exist then add track\n        if (rVideos.length) {\n          _remoteStream = rVideos[0].stream\n          _remoteStream.addTrack(e.track, _remoteStream)\n\n          remoteVideo = { // let delete\n            ...rVideos[0],\n            stream: _remoteStream,\n          }\n          remoteStreams = this.state.remoteStreams.map(_remoteVideo => {\n            return _remoteVideo.id === remoteVideo.id && remoteVideo || _remoteVideo\n          })\n        } else {\n          // 3. if not, then create new stream and add track\n          _remoteStream = new MediaStream()\n          _remoteStream.addTrack(e.track, _remoteStream)\n\n          remoteVideo = {\n            id: socketID,\n            name: socketID,\n            stream: _remoteStream,\n          }\n          remoteStreams = [...this.state.remoteStreams, remoteVideo]\n        }\n\n        // const remoteVideo = {\n        //   id: socketID,\n        //   name: socketID,\n        //   stream: e.streams[0]\n        // }\n\n        this.setState(prevState => {\n\n          // If we already have a stream in display let it stay the same, otherwise use the latest stream\n          // const remoteStream = prevState.remoteStreams.length > 0 ? {} : { remoteStream: e.streams[0] }\n          const remoteStream = prevState.remoteStreams.length > 0 ? {} : { remoteStream: _remoteStream }\n\n          // get currently selected video\n          let selectedVideo = prevState.remoteStreams.filter(stream => stream.id === prevState.selectedVideo.id)\n          // if the video is still in the list, then do nothing, otherwise set to new video stream\n          selectedVideo = selectedVideo.length ? {} : { selectedVideo: remoteVideo }\n\n          return {\n            // selectedVideo: remoteVideo,\n            ...selectedVideo,\n            // remoteStream: e.streams[0],\n            ...remoteStream,\n            remoteStreams, //: [...prevState.remoteStreams, remoteVideo]\n          }\n        })\n      }\n\n      pc.close = () => {\n        // alert('GONE')\n        console.log(\"pc closed\");\n      }\n\n      if (this.state.localStream)\n        //pc.addStream(this.state.localStream)\n\n        this.state.localStream.getTracks().forEach(track => {\n          pc.addTrack(track, this.state.localStream)\n        })\n\n      // return pc\n      callback(pc)\n\n    } catch(e) {\n      console.log('Something went wrong! pc not created!!', e)\n      // return;\n      callback(null)\n    }\n  }\n\n  componentDidMount = () => {\n\n    this.socket = io.connect(\n      this.serviceIP,\n      {\n        path: '/io/webrtc',\n        query: {\n          room: window.location.pathname,\n        }\n      }\n    )\n\n    this.socket.on('connection-success', data => {\n\n      this.getLocalStream()\n\n      //console.log(data.success)\n      const status = data.peerCount > 1 ? `Total Connected Peers to room ${window.location.pathname}: ${data.peerCount}` : 'Waiting for other peers to connect'\n\n      this.setState({\n        status: status,\n        messages: data.messages\n      })\n    })\n\n    this.socket.on('joined-peers', data => {\n\n      this.setState({\n        status: data.peerCount > 1 ? `Total Connected Peers to room ${window.location.pathname}: ${data.peerCount}` : 'Waiting for other peers to connect'\n      })\n    })\n\n    // ************************************* //\n    // ************************************* //\n    this.socket.on('peer-disconnected', data => {\n\n      // close peer-connection with this peer\n      this.state.peerConnections[data.socketID].close()\n\n      //console.log('peer-disconnected', data)\n\n      // get and stop remote audio and video tracks of the disconnected peer\n      const rVideo = this.state.remoteStreams.filter(stream => stream.id === data.socketID)\n      rVideo && this.stopTracks(rVideo[0].stream)\n\n      // filter out the disconnected peer stream\n      const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== data.socketID)\n\n      this.setState(prevState => {\n        // check if disconnected peer is the selected video and if there still connected peers, then select the first\n        const selectedVideo = prevState.selectedVideo.id === data.socketID && remoteStreams.length ? { selectedVideo: remoteStreams[0] } : null\n\n        return {\n          // remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n          remoteStreams,\n          ...selectedVideo,\n          status: data.peerCount > 1 ? `Total Connected Peers to room ${window.location.pathname}: ${data.peerCount}` : 'Waiting for other peers to connect'\n        }\n        }\n      )\n    })\n\n    // this.socket.on('offerOrAnswer', (sdp) => {\n\n    //   this.textref.value = JSON.stringify(sdp)\n\n    //   // set sdp as remote description\n    //   this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n    // })\n\n    this.socket.on('online-peer', socketID => {\n      console.log('connected peers ...', socketID)\n\n      // create and send offer to the peer (data.socketID)\n      // 1. Create new pc\n      this.createPeerConnection(socketID, pc => {\n        // 2. Create Offer\n          if (pc) {\n            // Send Channel\n            const handleSendChannelStatusChange = (event) => {\n              console.log('send channel status: ' + this.state.sendChannels[0].readyState)\n            }\n\n            const sendChannel = pc.createDataChannel('sendChannel')\n            sendChannel.onopen = handleSendChannelStatusChange\n            sendChannel.onclose = handleSendChannelStatusChange\n\n            this.setState(prevState => {\n              return {\n                sendChannels: [...prevState.sendChannels, sendChannel]\n              }\n            })\n  \n            // Receive Channels\n            const handleReceiveMessage = (event) => {\n              const message = JSON.parse(event.data)\n              // console.log(message)\n              this.setState(prevState => {\n                return {\n                  messages: [...prevState.messages, message]\n                }\n              })\n            }\n\n            const handleReceiveChannelStatusChange = (event) => {\n              if (this.receiveChannel) {\n                console.log(\"receive channel's status has changed to \" + this.receiveChannel.readyState);\n              }\n            }\n\n            const receiveChannelCallback = (event) => {\n              const receiveChannel = event.channel\n              receiveChannel.onmessage = handleReceiveMessage\n              receiveChannel.onopen = handleReceiveChannelStatusChange\n              receiveChannel.onclose = handleReceiveChannelStatusChange\n            }\n\n            pc.ondatachannel = receiveChannelCallback\n\n            pc.createOffer(this.state.sdpConstraints)\n              .then(sdp => {\n                pc.setLocalDescription(sdp)\n\n                this.sendToPeer('offer', sdp, {\n                  local: this.socket.id,\n                  remote: socketID\n                })\n             })\n        }\n      })\n    })\n\n    this.socket.on('offer', data => {\n      this.createPeerConnection(data.socketID, pc => {\n        pc.addStream(this.state.localStream)\n\n        // Send Channel\n        const handleSendChannelStatusChange = (event) => {\n          console.log('send channel status: ' + this.state.sendChannels[0].readyState)\n        }\n\n        const sendChannel = pc.createDataChannel('sendChannel')\n        sendChannel.onopen = handleSendChannelStatusChange\n        sendChannel.onclose = handleSendChannelStatusChange\n        \n        this.setState(prevState => {\n          return {\n            sendChannels: [...prevState.sendChannels, sendChannel]\n          }\n        })\n\n        // Receive Channels\n        const handleReceiveMessage = (event) => {\n          const message = JSON.parse(event.data)\n          // console.log(message)\n          this.setState(prevState => {\n            return {\n              messages: [...prevState.messages, message]\n            }\n          })\n        }\n\n        const handleReceiveChannelStatusChange = (event) => {\n          if (this.receiveChannel) {\n            console.log(\"receive channel's status has changed to \" + this.receiveChannel.readyState);\n          }\n        }\n\n        const receiveChannelCallback = (event) => {\n          const receiveChannel = event.channel\n          receiveChannel.onmessage = handleReceiveMessage\n          receiveChannel.onopen = handleReceiveChannelStatusChange\n          receiveChannel.onclose = handleReceiveChannelStatusChange\n        }\n\n        pc.ondatachannel = receiveChannelCallback\n\n        pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(() => {\n          // 2. Create Answer\n          pc.createAnswer(this.state.sdpConstraints)\n            .then(sdp => {\n              pc.setLocalDescription(sdp)\n\n              this.sendToPeer('answer', sdp, {\n                local: this.socket.id,\n                remote: data.socketID\n              })\n            })\n        })\n      })\n    })\n\n    this.socket.on('answer', data => {\n      // get remote's peerConnection\n      const pc = this.state.peerConnections[data.socketID]\n      console.log(data.sdp)\n      pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(()=>{})\n    })\n\n    this.socket.on('candidate', (data) => {\n      // get remote's peerConnection\n      const pc = this.state.peerConnections[data.socketID]\n\n      if (pc)\n        pc.addIceCandidate(new RTCIceCandidate(data.candidate))\n    })\n\n    // const pc_config = null\n\n    // const pc_config = {\n    //   \"iceServers\": [\n    //     // {\n    //     //   urls: 'stun:[STUN_IP]:[PORT]',\n    //     //   'credentials': '[YOR CREDENTIALS]',\n    //     //   'username': '[USERNAME]'\n    //     // },\n    //     {\n    //       urls : 'stun:stun.l.google.com:19302'\n    //     }\n    //   ]\n    // }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n    // create an instance of RTCPeerConnection\n    // this.pc = new RTCPeerConnection(this.state.pc_config)\n\n    // triggered when a new candidate is returned\n    // this.pc.onicecandidate = (e) => {\n    //   // send the candidates to the remote peer\n    //   // see addCandidate below to be triggered on the remote peer\n    //   if (e.candidate) {\n    //     // console.log(JSON.stringify(e.candidate))\n    //     this.sendToPeer('candidate', e.candidate)\n    //   }\n    // }\n\n    // triggered when there is a change in connection state\n    // this.pc.oniceconnectionstatechange = (e) => {\n    //   console.log(e)\n    // }\n\n    // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n    // this.pc.onaddstream = (e) => {\n    //   this.remoteVideoref.current.srcObject = e.stream\n    // }\n\n    // this.pc.ontrack = (e) => {\n    //   debugger\n    //   // this.remoteVideoref.current.srcObject = e.streams[0]\n\n    //   this.setState({\n    //     remoteStream: e.streams[0]\n    //   })\n    // }\n\n  }\n\n  // ************************************* //\n  // NOT REQUIRED\n  // ************************************* //\n  disconnectSocket = (socketToDisconnect) => {\n    this.sendToPeer('socket-to-disconnect', null, {\n      local: this.socket.id,\n      remote: socketToDisconnect\n    })\n  }\n\n  switchVideo = (_video) => {\n    console.log(_video)\n    this.setState({\n      selectedVideo: _video\n    })\n  }\n\n  // ************************************* //\n  // ************************************* //\n  stopTracks = (stream) => {\n    stream.getTracks().forEach(track => track.stop())\n  }\n\n  render() {\n\n    const {\n      status,\n      messages,\n      disconnected,\n      localStream,\n      peerConnections,\n      remoteStreams,\n    } = this.state\n\n    if (disconnected) {\n      // disconnect socket\n      this.socket.close()\n      // stop local audio & video tracks\n      this.stopTracks(localStream)\n\n      // stop all remote audio & video tracks\n      remoteStreams.forEach(rVideo => this.stopTracks(rVideo.stream))\n\n      // stop all remote peerconnections\n      peerConnections && Object.values(peerConnections).forEach(pc => pc.close())\n\n      return (<div>You have successfully Disconnected</div>)\n    }\n\n    //console.log(this.state.localStream)\n\n    const statusText = <div style={{ color: 'yellow', padding: 5 }}>{status}</div>\n\n    return (\n      <div>\n      <Draggable style={{\n        zIndex: 101,\n        position: 'absolute',\n        right: 0,\n        cursor: 'move'\n      }}>\n        <Video\n          videoType='localVideo'\n          videoStyles={{\n            // zIndex:2,\n            // position: 'absolute',\n            // right:0,\n            width: 200,\n            // height: 200,\n            // margin: 5,\n            // backgroundColor: 'black'\n          }}\n          frameStyle={{\n            width: 200,\n            margin: 5,\n            borderRadius: 5,\n            backgroundColor: 'black',\n          }}\n          showMuteControls={true}\n          // ref={this.localVideoref}\n          videoStream={localStream}\n          autoPlay muted>\n        </Video>\n      </Draggable>\n      {/* <Video\n          frameStyle={{\n            zIndex: 1,\n            position: 'fixed',\n            bottom: 0,\n            minWidth: '100%', minHeight: '100%',\n            backgroundColor: 'black'\n          }}\n        videoStyles={{\n          // zIndex: 1,\n          // position: 'fixed',\n          // bottom: 0,\n          minWidth: '100%',\n          minHeight: '100%',\n          // backgroundColor: 'black'\n        }}\n        // ref={ this.remoteVideoref }\n        videoStream={this.state.selectedVideo && this.state.selectedVideo.stream}\n        // autoPlay\n      ></Video> */}\n      <br />\n        <div style={{\n          zIndex: 3,\n          position: 'absolute',\n          // margin: 10,\n          // backgroundColor: '#cdc4ff4f',\n          // padding: 10,\n          // borderRadius: 5,\n        }}>\n          <i onClick={(e) => {this.setState({disconnected: true})}} style={{ cursor: 'pointer', paddingLeft: 15, color: 'red' }} class='material-icons'>highlight_off</i>\n          <div style={{\n            margin: 10,\n            backgroundColor: '#cdc4ff4f',\n            padding: 10,\n            borderRadius: 5,\n          }}>{ statusText }</div>\n        </div>\n        <div>\n          <Videos\n            switchVideo={this.switchVideo}\n            remoteStreams={remoteStreams}\n            // videoStream={this.state.selectedVideo && this.state.selectedVideo.stream}\n          ></Videos>\n        </div>\n        <br />\n\n        <Chat\n            user={{\n              uid: this.socket && this.socket.id || ''\n          }}\n          messages={messages}\n          sendMessage={(message) => {\n            this.setState(prevState => {\n              return {messages: [...prevState.messages, message]}\n            })\n            this.state.sendChannels.map(sendChannel => {\n              sendChannel.readyState === 'open' && sendChannel.send(JSON.stringify(message))\n            })\n            this.sendToPeer('new-message', JSON.stringify(message), {local: this.socket.id})\n          }}\n        />\n\n        {/* <div style={{zIndex: 1, position: 'fixed'}} >\n          <button onClick={this.createOffer}>Offer</button>\n          <button onClick={this.createAnswer}>Answer</button>\n          <br />\n          <textarea style={{ width: 450, height:40 }} ref={ref => { this.textref = ref }} />\n        </div> */}\n        {/* <br />\n        <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\n        <button onClick={this.addCandidate}>Add Candidate</button> */}\n      </div>\n    )\n  }\n}\n\nexport default Cam;"]},"metadata":{},"sourceType":"module"}