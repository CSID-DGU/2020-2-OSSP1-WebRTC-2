{"ast":null,"code":"import _objectSpread from\"/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/node_modules/@babel/runtime/helpers/esm/createSuper\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{Component}from'react';var Video=/*#__PURE__*/function(_Component){_inherits(Video,_Component);var _super=_createSuper(Video);function Video(props){var _this;_classCallCheck(this,Video);_this=_super.call(this,props);_this.mutemic=function(e){var stream=_this.video.srcObject.getTracks().filter(function(track){return track.kind==='audio';});_this.setState(function(prevState){if(stream)stream[0].enabled=!prevState.mic;return{mic:!prevState.mic};});};_this.mutecamera=function(e){var stream=_this.video.srcObject.getTracks().filter(function(track){return track.kind==='video';});_this.setState(function(prevState){if(stream)stream[0].enabled=!prevState.camera;return{camera:!prevState.camera};});};_this.state={mic:true,camera:true,// currentStream: new MediaStream(),\n// videoTrack: false,\nvideoVisible:true};return _this;}_createClass(Video,[{key:\"componentDidMount\",value:function componentDidMount(){if(this.props.videoStream){this.video.srcObject=this.props.videoStream;}}},{key:\"componentWillReceiveProps\",value:function componentWillReceiveProps(nextProps){var _this2=this;// console.log('1. nextProps', this.props.showMuteControls, nextProps.videoStream && nextProps.videoStream.getTracks())\nconsole.log('1',this.props.videoType,nextProps.videoStream);// This is done only once\nif(nextProps.videoStream&&nextProps.videoStream!==this.props.videoStream){// if (!this.props.videoStream) {\nconsole.log('2',this.props.videoType,nextProps.videoStream);this.video.srcObject=nextProps.videoStream;}// This is done only once when we receive a video track\nvar videoTrack=nextProps.videoStream&&nextProps.videoStream.getVideoTracks();if(this.props.videoType==='remoteVideo'&&videoTrack&&videoTrack.length){videoTrack[0].onmute=function(){// alert('muted')\n_this2.setState({videoVisible:false});_this2.props.videoMuted(nextProps.videoStream);};videoTrack[0].onunmute=function(){_this2.setState({videoVisible:true});_this2.props.videoMuted(nextProps.videoStream);};}var audioTrack=nextProps.videoStream&&nextProps.videoStream.getAudioTracks();if(this.props.videoType==='remoteVideo'&&audioTrack&&audioTrack.length){audioTrack[0].onmute=function(){alert('muted');// this.setState({\n//   videoVisible: false,\n// })\n// this.props.videoMuted(nextProps.videoStream)\n};}}},{key:\"render\",value:function render(){var _this3=this;var muteControls=this.props.showMuteControls&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"i\",{onClick:this.mutemic,style:{cursor:'pointer',padding:5,fontSize:20,color:this.state.mic&&'white'||'red'},class:\"material-icons\",children:this.state.mic&&'mic'||'mic_off'}),/*#__PURE__*/_jsx(\"i\",{onClick:this.mutecamera,style:{cursor:'pointer',padding:5,fontSize:20,color:this.state.camera&&'white'||'red'},class:\"material-icons\",children:this.state.camera&&'videocam'||'videocam_off'})]});return/*#__PURE__*/_jsxs(\"div\",{style:_objectSpread({},this.props.frameStyle),children:[/*#__PURE__*/_jsx(\"video\",{id:this.props.id,muted:this.props.muted,autoPlay:true,style:_objectSpread({visibility:this.state.videoVisible&&'visible'||'hidden'},this.props.videoStyles)// ref={ this.props.videoRef }\n,ref:function ref(_ref){_this3.video=_ref;}}),muteControls]});}}]);return Video;}(Component);export default Video;","map":{"version":3,"sources":["/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/src/Components/Cam/Video.js"],"names":["React","Component","Video","props","mutemic","e","stream","video","srcObject","getTracks","filter","track","kind","setState","prevState","enabled","mic","mutecamera","camera","state","videoVisible","videoStream","nextProps","console","log","videoType","videoTrack","getVideoTracks","length","onmute","videoMuted","onunmute","audioTrack","getAudioTracks","alert","muteControls","showMuteControls","cursor","padding","fontSize","color","frameStyle","id","muted","visibility","videoStyles","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass Video extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mic: true,\n      camera: true,\n      // currentStream: new MediaStream(),\n      // videoTrack: false,\n      videoVisible: true,\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.videoStream) {\n      this.video.srcObject = this.props.videoStream\n    }\n  }\n\n\n  componentWillReceiveProps(nextProps) {\n\n    // console.log('1. nextProps', this.props.showMuteControls, nextProps.videoStream && nextProps.videoStream.getTracks())\n    console.log('1', this.props.videoType, nextProps.videoStream)\n\n    // This is done only once\n    if (nextProps.videoStream && nextProps.videoStream !== this.props.videoStream) {\n    // if (!this.props.videoStream) {\n      console.log('2', this.props.videoType, nextProps.videoStream)\n      this.video.srcObject = nextProps.videoStream\n    }\n\n    // This is done only once when we receive a video track\n    const videoTrack = nextProps.videoStream && nextProps.videoStream.getVideoTracks()\n    if (this.props.videoType === 'remoteVideo' && videoTrack && videoTrack.length) {\n\n      videoTrack[0].onmute = () => {\n        // alert('muted')\n        this.setState({\n          videoVisible: false,\n        })\n        this.props.videoMuted(nextProps.videoStream)\n      }\n\n      videoTrack[0].onunmute = () => {\n        this.setState({\n          videoVisible: true,\n        })\n        this.props.videoMuted(nextProps.videoStream)\n      }\n    }\n\n    const audioTrack = nextProps.videoStream && nextProps.videoStream.getAudioTracks()\n    if (this.props.videoType === 'remoteVideo' && audioTrack && audioTrack.length) {\n      audioTrack[0].onmute = () => {\n        alert('muted')\n        // this.setState({\n        //   videoVisible: false,\n        // })\n        // this.props.videoMuted(nextProps.videoStream)\n      }\n    }\n  }\n\n  mutemic = (e) => {\n    const stream = this.video.srcObject.getTracks().filter(track => track.kind === 'audio')\n    this.setState(prevState => {\n      if (stream) stream[0].enabled = !prevState.mic\n      return {mic: !prevState.mic}\n    })\n  }\n\n  mutecamera = (e) => {\n    const stream = this.video.srcObject.getTracks().filter(track => track.kind === 'video')\n    this.setState(prevState => {\n      if (stream) stream[0].enabled = !prevState.camera\n      return {camera: !prevState.camera}\n    })\n  }\n\n  render() {\n    const muteControls = this.props.showMuteControls && (\n      <div>\n        <i onClick={this.mutemic} style={{ cursor: 'pointer', padding: 5, fontSize: 20, color: this.state.mic && 'white' || 'red' }} class='material-icons'>{this.state.mic && 'mic' || 'mic_off'}</i>\n        <i onClick={this.mutecamera} style={{ cursor: 'pointer', padding: 5, fontSize: 20, color: this.state.camera && 'white' || 'red' }} class='material-icons'>{this.state.camera && 'videocam' || 'videocam_off'}</i>\n      </div>\n    )\n\n    return (\n      <div\n        style={{ ...this.props.frameStyle,  }}\n      >\n        {/* <audio id={this.props.id} muted={this.props.muted} ref={ (ref) => {this.video = ref }}></audio> */}\n        <video\n          id={this.props.id}\n          muted={this.props.muted}\n          autoPlay\n          style={{\n            visibility: this.state.videoVisible && 'visible' || 'hidden',\n            ...this.props.videoStyles,\n          }}\n          // ref={ this.props.videoRef }\n          ref={ (ref) => {this.video = ref }}\n        ></video>\n        {muteControls}\n      </div>\n    )\n  }\n}\n\nexport default Video"]},"metadata":{},"sourceType":"module"}