{"ast":null,"code":"/* global attachEvent */\nconst XMLHttpRequest = require(\"xmlhttprequest-ssl\");\n\nconst Polling = require(\"./polling\");\n\nconst Emitter = require(\"component-emitter\");\n\nconst {\n  pick\n} = require(\"../util\");\n\nconst globalThis = require(\"../globalThis\");\n\nconst debug = require(\"debug\")(\"engine.io-client:polling-xhr\");\n/**\n * Empty function\n */\n\n\nfunction empty() {}\n\nconst hasXHR2 = function () {\n  const XMLHttpRequest = require(\"xmlhttprequest-ssl\");\n\n  const xhr = new XMLHttpRequest({\n    xdomain: false\n  });\n  return null != xhr.responseType;\n}();\n\nclass XHR extends Polling {\n  /**\n   * XHR Polling constructor.\n   *\n   * @param {Object} opts\n   * @api public\n   */\n  constructor(opts) {\n    super(opts);\n\n    if (typeof location !== \"undefined\") {\n      const isSSL = \"https:\" === location.protocol;\n      let port = location.port; // some user agents have empty `location.port`\n\n      if (!port) {\n        port = isSSL ? 443 : 80;\n      }\n\n      this.xd = typeof location !== \"undefined\" && opts.hostname !== location.hostname || port !== opts.port;\n      this.xs = opts.secure !== isSSL;\n    }\n    /**\n     * XHR supports binary\n     */\n\n\n    const forceBase64 = opts && opts.forceBase64;\n    this.supportsBinary = hasXHR2 && !forceBase64;\n  }\n  /**\n   * Creates a request.\n   *\n   * @param {String} method\n   * @api private\n   */\n\n\n  request(opts = {}) {\n    Object.assign(opts, {\n      supportsBinary: this.supportsBinary,\n      xd: this.xd,\n      xs: this.xs\n    }, this.opts);\n    return new Request(this.uri(), opts);\n  }\n  /**\n   * Sends data.\n   *\n   * @param {String} data to send.\n   * @param {Function} called upon flush.\n   * @api private\n   */\n\n\n  doWrite(data, fn) {\n    const isBinary = typeof data !== \"string\" && data !== undefined;\n    const req = this.request({\n      method: \"POST\",\n      data: data,\n      isBinary: isBinary\n    });\n    const self = this;\n    req.on(\"success\", fn);\n    req.on(\"error\", function (err) {\n      self.onError(\"xhr post error\", err);\n    });\n  }\n  /**\n   * Starts a poll cycle.\n   *\n   * @api private\n   */\n\n\n  doPoll() {\n    debug(\"xhr poll\");\n    const req = this.request();\n    const self = this;\n    req.on(\"data\", function (data) {\n      self.onData(data);\n    });\n    req.on(\"error\", function (err) {\n      self.onError(\"xhr poll error\", err);\n    });\n    this.pollXhr = req;\n  }\n\n}\n\nclass Request extends Emitter {\n  /**\n   * Request constructor\n   *\n   * @param {Object} options\n   * @api public\n   */\n  constructor(uri, opts) {\n    super();\n    this.opts = opts;\n    this.method = opts.method || \"GET\";\n    this.uri = uri;\n    this.async = false !== opts.async;\n    this.data = undefined !== opts.data ? opts.data : null;\n    this.isBinary = opts.isBinary;\n    this.supportsBinary = opts.supportsBinary;\n    this.create();\n  }\n  /**\n   * Creates the XHR object and sends the request.\n   *\n   * @api private\n   */\n\n\n  create() {\n    const opts = pick(this.opts, \"agent\", \"enablesXDR\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\");\n    opts.xdomain = !!this.opts.xd;\n    opts.xscheme = !!this.opts.xs;\n    const xhr = this.xhr = new XMLHttpRequest(opts);\n    const self = this;\n\n    try {\n      debug(\"xhr open %s: %s\", this.method, this.uri);\n      xhr.open(this.method, this.uri, this.async);\n\n      try {\n        if (this.opts.extraHeaders) {\n          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n\n          for (let i in this.opts.extraHeaders) {\n            if (this.opts.extraHeaders.hasOwnProperty(i)) {\n              xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n            }\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n\n      if (\"POST\" === this.method) {\n        try {\n          if (this.isBinary) {\n            xhr.setRequestHeader(\"Content-type\", \"application/octet-stream\");\n          } else {\n            xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n          }\n        } catch (e) {}\n      }\n\n      try {\n        xhr.setRequestHeader(\"Accept\", \"*/*\");\n      } catch (e) {} // ie6 check\n\n\n      if (\"withCredentials\" in xhr) {\n        xhr.withCredentials = this.opts.withCredentials;\n      }\n\n      if (this.opts.requestTimeout) {\n        xhr.timeout = this.opts.requestTimeout;\n      }\n\n      if (this.hasXDR()) {\n        xhr.onload = function () {\n          self.onLoad();\n        };\n\n        xhr.onerror = function () {\n          self.onError(xhr.responseText);\n        };\n      } else {\n        xhr.onreadystatechange = function () {\n          if (xhr.readyState === 2) {\n            try {\n              const contentType = xhr.getResponseHeader(\"Content-Type\");\n\n              if (self.supportsBinary && contentType === \"application/octet-stream\" || contentType === \"application/octet-stream; charset=UTF-8\") {\n                xhr.responseType = \"arraybuffer\";\n              }\n            } catch (e) {}\n          }\n\n          if (4 !== xhr.readyState) return;\n\n          if (200 === xhr.status || 1223 === xhr.status) {\n            self.onLoad();\n          } else {\n            // make sure the `error` event handler that's user-set\n            // does not throw in the same tick and gets caught here\n            setTimeout(function () {\n              self.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n            }, 0);\n          }\n        };\n      }\n\n      debug(\"xhr data %s\", this.data);\n      xhr.send(this.data);\n    } catch (e) {\n      // Need to defer since .create() is called directly from the constructor\n      // and thus the 'error' event can only be only bound *after* this exception\n      // occurs.  Therefore, also, we cannot throw here at all.\n      setTimeout(function () {\n        self.onError(e);\n      }, 0);\n      return;\n    }\n\n    if (typeof document !== \"undefined\") {\n      this.index = Request.requestsCount++;\n      Request.requests[this.index] = this;\n    }\n  }\n  /**\n   * Called upon successful response.\n   *\n   * @api private\n   */\n\n\n  onSuccess() {\n    this.emit(\"success\");\n    this.cleanup();\n  }\n  /**\n   * Called if we have data.\n   *\n   * @api private\n   */\n\n\n  onData(data) {\n    this.emit(\"data\", data);\n    this.onSuccess();\n  }\n  /**\n   * Called upon error.\n   *\n   * @api private\n   */\n\n\n  onError(err) {\n    this.emit(\"error\", err);\n    this.cleanup(true);\n  }\n  /**\n   * Cleans up house.\n   *\n   * @api private\n   */\n\n\n  cleanup(fromError) {\n    if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n      return;\n    } // xmlhttprequest\n\n\n    if (this.hasXDR()) {\n      this.xhr.onload = this.xhr.onerror = empty;\n    } else {\n      this.xhr.onreadystatechange = empty;\n    }\n\n    if (fromError) {\n      try {\n        this.xhr.abort();\n      } catch (e) {}\n    }\n\n    if (typeof document !== \"undefined\") {\n      delete Request.requests[this.index];\n    }\n\n    this.xhr = null;\n  }\n  /**\n   * Called upon load.\n   *\n   * @api private\n   */\n\n\n  onLoad() {\n    let data;\n\n    try {\n      let contentType;\n\n      try {\n        contentType = this.xhr.getResponseHeader(\"Content-Type\");\n      } catch (e) {}\n\n      if (contentType === \"application/octet-stream\" || contentType === \"application/octet-stream; charset=UTF-8\") {\n        data = this.xhr.response || this.xhr.responseText;\n      } else {\n        data = this.xhr.responseText;\n      }\n    } catch (e) {\n      this.onError(e);\n    }\n\n    if (null != data) {\n      this.onData(data);\n    }\n  }\n  /**\n   * Check if it has XDomainRequest.\n   *\n   * @api private\n   */\n\n\n  hasXDR() {\n    return typeof XDomainRequest !== \"undefined\" && !this.xs && this.enablesXDR;\n  }\n  /**\n   * Aborts the request.\n   *\n   * @api public\n   */\n\n\n  abort() {\n    this.cleanup();\n  }\n\n}\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\n\n\nRequest.requestsCount = 0;\nRequest.requests = {};\n\nif (typeof document !== \"undefined\") {\n  if (typeof attachEvent === \"function\") {\n    attachEvent(\"onunload\", unloadHandler);\n  } else if (typeof addEventListener === \"function\") {\n    const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n    addEventListener(terminationEvent, unloadHandler, false);\n  }\n}\n\nfunction unloadHandler() {\n  for (let i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}\n\nmodule.exports = XHR;\nmodule.exports.Request = Request;","map":{"version":3,"sources":["/Users/eunyoung/OSSP/2020-2-OSSP1-WebRTC-2-main/conference/node_modules/engine.io-client/lib/transports/polling-xhr.js"],"names":["XMLHttpRequest","require","Polling","Emitter","pick","globalThis","debug","empty","hasXHR2","xhr","xdomain","responseType","XHR","constructor","opts","location","isSSL","protocol","port","xd","hostname","xs","secure","forceBase64","supportsBinary","request","Object","assign","Request","uri","doWrite","data","fn","isBinary","undefined","req","method","self","on","err","onError","doPoll","onData","pollXhr","async","create","xscheme","open","extraHeaders","setDisableHeaderCheck","i","hasOwnProperty","setRequestHeader","e","console","log","withCredentials","requestTimeout","timeout","hasXDR","onload","onLoad","onerror","responseText","onreadystatechange","readyState","contentType","getResponseHeader","status","setTimeout","send","document","index","requestsCount","requests","onSuccess","emit","cleanup","fromError","abort","response","XDomainRequest","enablesXDR","attachEvent","unloadHandler","addEventListener","terminationEvent","module","exports"],"mappings":"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","sourcesContent":["/* global attachEvent */\n\nconst XMLHttpRequest = require(\"xmlhttprequest-ssl\");\nconst Polling = require(\"./polling\");\nconst Emitter = require(\"component-emitter\");\nconst { pick } = require(\"../util\");\nconst globalThis = require(\"../globalThis\");\n\nconst debug = require(\"debug\")(\"engine.io-client:polling-xhr\");\n\n/**\n * Empty function\n */\n\nfunction empty() {}\n\nconst hasXHR2 = (function() {\n  const XMLHttpRequest = require(\"xmlhttprequest-ssl\");\n  const xhr = new XMLHttpRequest({ xdomain: false });\n  return null != xhr.responseType;\n})();\n\nclass XHR extends Polling {\n  /**\n   * XHR Polling constructor.\n   *\n   * @param {Object} opts\n   * @api public\n   */\n  constructor(opts) {\n    super(opts);\n\n    if (typeof location !== \"undefined\") {\n      const isSSL = \"https:\" === location.protocol;\n      let port = location.port;\n\n      // some user agents have empty `location.port`\n      if (!port) {\n        port = isSSL ? 443 : 80;\n      }\n\n      this.xd =\n        (typeof location !== \"undefined\" &&\n          opts.hostname !== location.hostname) ||\n        port !== opts.port;\n      this.xs = opts.secure !== isSSL;\n    }\n    /**\n     * XHR supports binary\n     */\n    const forceBase64 = opts && opts.forceBase64;\n    this.supportsBinary = hasXHR2 && !forceBase64;\n  }\n\n  /**\n   * Creates a request.\n   *\n   * @param {String} method\n   * @api private\n   */\n  request(opts = {}) {\n    Object.assign(\n      opts,\n      { supportsBinary: this.supportsBinary, xd: this.xd, xs: this.xs },\n      this.opts\n    );\n    return new Request(this.uri(), opts);\n  }\n\n  /**\n   * Sends data.\n   *\n   * @param {String} data to send.\n   * @param {Function} called upon flush.\n   * @api private\n   */\n  doWrite(data, fn) {\n    const isBinary = typeof data !== \"string\" && data !== undefined;\n    const req = this.request({\n      method: \"POST\",\n      data: data,\n      isBinary: isBinary\n    });\n    const self = this;\n    req.on(\"success\", fn);\n    req.on(\"error\", function(err) {\n      self.onError(\"xhr post error\", err);\n    });\n  }\n\n  /**\n   * Starts a poll cycle.\n   *\n   * @api private\n   */\n  doPoll() {\n    debug(\"xhr poll\");\n    const req = this.request();\n    const self = this;\n    req.on(\"data\", function(data) {\n      self.onData(data);\n    });\n    req.on(\"error\", function(err) {\n      self.onError(\"xhr poll error\", err);\n    });\n    this.pollXhr = req;\n  }\n}\n\nclass Request extends Emitter {\n  /**\n   * Request constructor\n   *\n   * @param {Object} options\n   * @api public\n   */\n  constructor(uri, opts) {\n    super();\n    this.opts = opts;\n\n    this.method = opts.method || \"GET\";\n    this.uri = uri;\n    this.async = false !== opts.async;\n    this.data = undefined !== opts.data ? opts.data : null;\n    this.isBinary = opts.isBinary;\n    this.supportsBinary = opts.supportsBinary;\n\n    this.create();\n  }\n\n  /**\n   * Creates the XHR object and sends the request.\n   *\n   * @api private\n   */\n  create() {\n    const opts = pick(\n      this.opts,\n      \"agent\",\n      \"enablesXDR\",\n      \"pfx\",\n      \"key\",\n      \"passphrase\",\n      \"cert\",\n      \"ca\",\n      \"ciphers\",\n      \"rejectUnauthorized\"\n    );\n    opts.xdomain = !!this.opts.xd;\n    opts.xscheme = !!this.opts.xs;\n\n    const xhr = (this.xhr = new XMLHttpRequest(opts));\n    const self = this;\n\n    try {\n      debug(\"xhr open %s: %s\", this.method, this.uri);\n      xhr.open(this.method, this.uri, this.async);\n      try {\n        if (this.opts.extraHeaders) {\n          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n          for (let i in this.opts.extraHeaders) {\n            if (this.opts.extraHeaders.hasOwnProperty(i)) {\n              xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n            }\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n\n      if (\"POST\" === this.method) {\n        try {\n          if (this.isBinary) {\n            xhr.setRequestHeader(\"Content-type\", \"application/octet-stream\");\n          } else {\n            xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n          }\n        } catch (e) {}\n      }\n\n      try {\n        xhr.setRequestHeader(\"Accept\", \"*/*\");\n      } catch (e) {}\n\n      // ie6 check\n      if (\"withCredentials\" in xhr) {\n        xhr.withCredentials = this.opts.withCredentials;\n      }\n\n      if (this.opts.requestTimeout) {\n        xhr.timeout = this.opts.requestTimeout;\n      }\n\n      if (this.hasXDR()) {\n        xhr.onload = function() {\n          self.onLoad();\n        };\n        xhr.onerror = function() {\n          self.onError(xhr.responseText);\n        };\n      } else {\n        xhr.onreadystatechange = function() {\n          if (xhr.readyState === 2) {\n            try {\n              const contentType = xhr.getResponseHeader(\"Content-Type\");\n              if (\n                (self.supportsBinary &&\n                  contentType === \"application/octet-stream\") ||\n                contentType === \"application/octet-stream; charset=UTF-8\"\n              ) {\n                xhr.responseType = \"arraybuffer\";\n              }\n            } catch (e) {}\n          }\n          if (4 !== xhr.readyState) return;\n          if (200 === xhr.status || 1223 === xhr.status) {\n            self.onLoad();\n          } else {\n            // make sure the `error` event handler that's user-set\n            // does not throw in the same tick and gets caught here\n            setTimeout(function() {\n              self.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n            }, 0);\n          }\n        };\n      }\n\n      debug(\"xhr data %s\", this.data);\n      xhr.send(this.data);\n    } catch (e) {\n      // Need to defer since .create() is called directly from the constructor\n      // and thus the 'error' event can only be only bound *after* this exception\n      // occurs.  Therefore, also, we cannot throw here at all.\n      setTimeout(function() {\n        self.onError(e);\n      }, 0);\n      return;\n    }\n\n    if (typeof document !== \"undefined\") {\n      this.index = Request.requestsCount++;\n      Request.requests[this.index] = this;\n    }\n  }\n\n  /**\n   * Called upon successful response.\n   *\n   * @api private\n   */\n  onSuccess() {\n    this.emit(\"success\");\n    this.cleanup();\n  }\n\n  /**\n   * Called if we have data.\n   *\n   * @api private\n   */\n  onData(data) {\n    this.emit(\"data\", data);\n    this.onSuccess();\n  }\n\n  /**\n   * Called upon error.\n   *\n   * @api private\n   */\n  onError(err) {\n    this.emit(\"error\", err);\n    this.cleanup(true);\n  }\n\n  /**\n   * Cleans up house.\n   *\n   * @api private\n   */\n  cleanup(fromError) {\n    if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n      return;\n    }\n    // xmlhttprequest\n    if (this.hasXDR()) {\n      this.xhr.onload = this.xhr.onerror = empty;\n    } else {\n      this.xhr.onreadystatechange = empty;\n    }\n\n    if (fromError) {\n      try {\n        this.xhr.abort();\n      } catch (e) {}\n    }\n\n    if (typeof document !== \"undefined\") {\n      delete Request.requests[this.index];\n    }\n\n    this.xhr = null;\n  }\n\n  /**\n   * Called upon load.\n   *\n   * @api private\n   */\n  onLoad() {\n    let data;\n    try {\n      let contentType;\n      try {\n        contentType = this.xhr.getResponseHeader(\"Content-Type\");\n      } catch (e) {}\n      if (\n        contentType === \"application/octet-stream\" ||\n        contentType === \"application/octet-stream; charset=UTF-8\"\n      ) {\n        data = this.xhr.response || this.xhr.responseText;\n      } else {\n        data = this.xhr.responseText;\n      }\n    } catch (e) {\n      this.onError(e);\n    }\n    if (null != data) {\n      this.onData(data);\n    }\n  }\n\n  /**\n   * Check if it has XDomainRequest.\n   *\n   * @api private\n   */\n  hasXDR() {\n    return typeof XDomainRequest !== \"undefined\" && !this.xs && this.enablesXDR;\n  }\n\n  /**\n   * Aborts the request.\n   *\n   * @api public\n   */\n  abort() {\n    this.cleanup();\n  }\n}\n\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\n\nRequest.requestsCount = 0;\nRequest.requests = {};\n\nif (typeof document !== \"undefined\") {\n  if (typeof attachEvent === \"function\") {\n    attachEvent(\"onunload\", unloadHandler);\n  } else if (typeof addEventListener === \"function\") {\n    const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n    addEventListener(terminationEvent, unloadHandler, false);\n  }\n}\n\nfunction unloadHandler() {\n  for (let i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}\n\nmodule.exports = XHR;\nmodule.exports.Request = Request;\n"]},"metadata":{},"sourceType":"script"}